
garage project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000009fe  00000a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013a8  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087d  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b93  00000000  00000000  00002859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000033ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000533  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e7d  00000000  00000000  00003adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
   c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  10:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  14:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  18:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  1c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  20:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  24:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  28:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  30:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  34:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  3c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  40:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  44:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  4c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  50:	0c 94 ab 00 	jmp	0x156	; 0x156 <__bad_interrupt>
  54:	b9 00       	.word	0x00b9	; ????
  56:	d2 00       	.word	0x00d2	; ????
  58:	eb 00       	.word	0x00eb	; ????
  5a:	04 01       	movw	r0, r8
  5c:	1c 01       	movw	r2, r24
  5e:	1c 01       	movw	r2, r24
  60:	1c 01       	movw	r2, r24
  62:	1c 01       	movw	r2, r24
  64:	1c 01       	movw	r2, r24
  66:	1c 01       	movw	r2, r24
  68:	1c 01       	movw	r2, r24
  6a:	1c 01       	movw	r2, r24
  6c:	1c 01       	movw	r2, r24
  6e:	1c 01       	movw	r2, r24
  70:	1c 01       	movw	r2, r24
  72:	1c 01       	movw	r2, r24
  74:	1c 01       	movw	r2, r24
  76:	1c 01       	movw	r2, r24
  78:	1c 01       	movw	r2, r24
  7a:	1c 01       	movw	r2, r24
  7c:	1c 01       	movw	r2, r24
  7e:	1c 01       	movw	r2, r24
  80:	1c 01       	movw	r2, r24
  82:	1c 01       	movw	r2, r24
  84:	1c 01       	movw	r2, r24
  86:	1c 01       	movw	r2, r24
  88:	1c 01       	movw	r2, r24
  8a:	1c 01       	movw	r2, r24
  8c:	1c 01       	movw	r2, r24
  8e:	1c 01       	movw	r2, r24
  90:	1c 01       	movw	r2, r24
  92:	1c 01       	movw	r2, r24
  94:	b9 00       	.word	0x00b9	; ????
  96:	d2 00       	.word	0x00d2	; ????
  98:	eb 00       	.word	0x00eb	; ????
  9a:	04 01       	movw	r0, r8
  9c:	29 01       	movw	r4, r18
  9e:	42 01       	movw	r8, r4
  a0:	5b 01       	movw	r10, r22
  a2:	74 01       	movw	r14, r8
  a4:	8c 01       	movw	r16, r24
  a6:	8c 01       	movw	r16, r24
  a8:	8c 01       	movw	r16, r24
  aa:	8c 01       	movw	r16, r24
  ac:	8c 01       	movw	r16, r24
  ae:	8c 01       	movw	r16, r24
  b0:	8c 01       	movw	r16, r24
  b2:	8c 01       	movw	r16, r24
  b4:	8c 01       	movw	r16, r24
  b6:	8c 01       	movw	r16, r24
  b8:	8c 01       	movw	r16, r24
  ba:	8c 01       	movw	r16, r24
  bc:	8c 01       	movw	r16, r24
  be:	8c 01       	movw	r16, r24
  c0:	8c 01       	movw	r16, r24
  c2:	8c 01       	movw	r16, r24
  c4:	8c 01       	movw	r16, r24
  c6:	8c 01       	movw	r16, r24
  c8:	8c 01       	movw	r16, r24
  ca:	8c 01       	movw	r16, r24
  cc:	8c 01       	movw	r16, r24
  ce:	8c 01       	movw	r16, r24
  d0:	8c 01       	movw	r16, r24
  d2:	8c 01       	movw	r16, r24
  d4:	8c 01       	movw	r16, r24
  d6:	8c 01       	movw	r16, r24
  d8:	8c 01       	movw	r16, r24
  da:	8c 01       	movw	r16, r24
  dc:	29 01       	movw	r4, r18
  de:	42 01       	movw	r8, r4
  e0:	5b 01       	movw	r10, r22
  e2:	74 01       	movw	r14, r8
  e4:	9a 01       	movw	r18, r20
  e6:	a1 01       	movw	r20, r2
  e8:	a8 01       	movw	r20, r16
  ea:	af 01       	movw	r20, r30
  ec:	b5 01       	movw	r22, r10
  ee:	b5 01       	movw	r22, r10
  f0:	b5 01       	movw	r22, r10
  f2:	b5 01       	movw	r22, r10
  f4:	b5 01       	movw	r22, r10
  f6:	b5 01       	movw	r22, r10
  f8:	b5 01       	movw	r22, r10
  fa:	b5 01       	movw	r22, r10
  fc:	b5 01       	movw	r22, r10
  fe:	b5 01       	movw	r22, r10
 100:	b5 01       	movw	r22, r10
 102:	b5 01       	movw	r22, r10
 104:	b5 01       	movw	r22, r10
 106:	b5 01       	movw	r22, r10
 108:	b5 01       	movw	r22, r10
 10a:	b5 01       	movw	r22, r10
 10c:	b5 01       	movw	r22, r10
 10e:	b5 01       	movw	r22, r10
 110:	b5 01       	movw	r22, r10
 112:	b5 01       	movw	r22, r10
 114:	b5 01       	movw	r22, r10
 116:	b5 01       	movw	r22, r10
 118:	b5 01       	movw	r22, r10
 11a:	b5 01       	movw	r22, r10
 11c:	b5 01       	movw	r22, r10
 11e:	b5 01       	movw	r22, r10
 120:	b5 01       	movw	r22, r10
 122:	b5 01       	movw	r22, r10
 124:	9a 01       	movw	r18, r20
 126:	a1 01       	movw	r20, r2
 128:	a8 01       	movw	r20, r16
 12a:	af 01       	movw	r20, r30

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	a0 e6       	ldi	r26, 0x60	; 96
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ee ef       	ldi	r30, 0xFE	; 254
 140:	f9 e0       	ldi	r31, 0x09	; 9
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	ae 3a       	cpi	r26, 0xAE	; 174
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>
 14e:	0e 94 99 02 	call	0x532	; 0x532 <main>
 152:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <_exit>

00000156 <__bad_interrupt>:
 156:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015a <DIO_set_pin_dir>:
		PORTC|=value;
		break;
		case 'D':
		case 'd':
		PORTD&=0xf0;
		PORTD|=value;
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	e1 54       	subi	r30, 0x41	; 65
 160:	f1 09       	sbc	r31, r1
 162:	e4 32       	cpi	r30, 0x24	; 36
 164:	f1 05       	cpc	r31, r1
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_set_pin_dir+0x10>
 168:	67 c0       	rjmp	.+206    	; 0x238 <DIO_set_pin_dir+0xde>
 16a:	e6 5d       	subi	r30, 0xD6	; 214
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__tablejump2__>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	59 f4       	brne	.+22     	; 0x18c <DIO_set_pin_dir+0x32>
 176:	2a b3       	in	r18, 0x1a	; 26
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_set_pin_dir+0x28>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_set_pin_dir+0x24>
 186:	82 2b       	or	r24, r18
 188:	8a bb       	out	0x1a, r24	; 26
 18a:	08 95       	ret
 18c:	2a b3       	in	r18, 0x1a	; 26
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_set_pin_dir+0x3e>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_set_pin_dir+0x3a>
 19c:	80 95       	com	r24
 19e:	82 23       	and	r24, r18
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	08 95       	ret
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_set_pin_dir+0x64>
 1a8:	27 b3       	in	r18, 0x17	; 23
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_set_pin_dir+0x5a>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_set_pin_dir+0x56>
 1b8:	82 2b       	or	r24, r18
 1ba:	87 bb       	out	0x17, r24	; 23
 1bc:	08 95       	ret
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_set_pin_dir+0x70>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_set_pin_dir+0x6c>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	87 bb       	out	0x17, r24	; 23
 1d4:	08 95       	ret
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_set_pin_dir+0x96>
 1da:	24 b3       	in	r18, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_set_pin_dir+0x8c>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_set_pin_dir+0x88>
 1ea:	82 2b       	or	r24, r18
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
 1f0:	24 b3       	in	r18, 0x14	; 20
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_set_pin_dir+0xa2>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_set_pin_dir+0x9e>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	84 bb       	out	0x14, r24	; 20
 206:	08 95       	ret
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	59 f4       	brne	.+22     	; 0x222 <DIO_set_pin_dir+0xc8>
 20c:	21 b3       	in	r18, 0x11	; 17
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_set_pin_dir+0xbe>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_set_pin_dir+0xba>
 21c:	82 2b       	or	r24, r18
 21e:	81 bb       	out	0x11, r24	; 17
 220:	08 95       	ret
 222:	21 b3       	in	r18, 0x11	; 17
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_set_pin_dir+0xd4>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_set_pin_dir+0xd0>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	81 bb       	out	0x11, r24	; 17
 238:	08 95       	ret

0000023a <DIO_write_pin>:
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	e1 54       	subi	r30, 0x41	; 65
 240:	f1 09       	sbc	r31, r1
 242:	e4 32       	cpi	r30, 0x24	; 36
 244:	f1 05       	cpc	r31, r1
 246:	08 f0       	brcs	.+2      	; 0x24a <DIO_write_pin+0x10>
 248:	67 c0       	rjmp	.+206    	; 0x318 <DIO_write_pin+0xde>
 24a:	e2 5b       	subi	r30, 0xB2	; 178
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__tablejump2__>
 252:	41 30       	cpi	r20, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <DIO_write_pin+0x32>
 256:	2b b3       	in	r18, 0x1b	; 27
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write_pin+0x28>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write_pin+0x24>
 266:	82 2b       	or	r24, r18
 268:	8b bb       	out	0x1b, r24	; 27
 26a:	08 95       	ret
 26c:	2b b3       	in	r18, 0x1b	; 27
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_write_pin+0x3e>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_write_pin+0x3a>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	8b bb       	out	0x1b, r24	; 27
 282:	08 95       	ret
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	59 f4       	brne	.+22     	; 0x29e <DIO_write_pin+0x64>
 288:	28 b3       	in	r18, 0x18	; 24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_write_pin+0x5a>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_write_pin+0x56>
 298:	82 2b       	or	r24, r18
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	08 95       	ret
 29e:	28 b3       	in	r18, 0x18	; 24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write_pin+0x70>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write_pin+0x6c>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	08 95       	ret
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <DIO_write_pin+0x96>
 2ba:	25 b3       	in	r18, 0x15	; 21
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_write_pin+0x8c>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_write_pin+0x88>
 2ca:	82 2b       	or	r24, r18
 2cc:	85 bb       	out	0x15, r24	; 21
 2ce:	08 95       	ret
 2d0:	25 b3       	in	r18, 0x15	; 21
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_write_pin+0xa2>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_write_pin+0x9e>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	85 bb       	out	0x15, r24	; 21
 2e6:	08 95       	ret
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	59 f4       	brne	.+22     	; 0x302 <DIO_write_pin+0xc8>
 2ec:	22 b3       	in	r18, 0x12	; 18
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_write_pin+0xbe>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_write_pin+0xba>
 2fc:	82 2b       	or	r24, r18
 2fe:	82 bb       	out	0x12, r24	; 18
 300:	08 95       	ret
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_write_pin+0xd4>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_write_pin+0xd0>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	82 bb       	out	0x12, r24	; 18
 318:	08 95       	ret

0000031a <DIO_write_high_nibble>:
	}
}

void DIO_write_high_nibble(unsigned char port,unsigned char number)
{
	number<<=4;
 31a:	62 95       	swap	r22
 31c:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	e1 54       	subi	r30, 0x41	; 65
 324:	f1 09       	sbc	r31, r1
 326:	e4 32       	cpi	r30, 0x24	; 36
 328:	f1 05       	cpc	r31, r1
 32a:	f8 f4       	brcc	.+62     	; 0x36a <DIO_write_high_nibble+0x50>
 32c:	ee 58       	subi	r30, 0x8E	; 142
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA&=0x0F;
 334:	8b b3       	in	r24, 0x1b	; 27
 336:	8f 70       	andi	r24, 0x0F	; 15
 338:	8b bb       	out	0x1b, r24	; 27
		PORTA|=number;
 33a:	8b b3       	in	r24, 0x1b	; 27
 33c:	68 2b       	or	r22, r24
 33e:	6b bb       	out	0x1b, r22	; 27
		break;
 340:	08 95       	ret
		case 'B':
		case 'b':
		PORTB&=0x0F;
 342:	88 b3       	in	r24, 0x18	; 24
 344:	8f 70       	andi	r24, 0x0F	; 15
 346:	88 bb       	out	0x18, r24	; 24
		PORTB|=number;
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	68 2b       	or	r22, r24
 34c:	68 bb       	out	0x18, r22	; 24
		break;
 34e:	08 95       	ret
		case 'C':
		case 'c':
		PORTC&=0x0F;
 350:	85 b3       	in	r24, 0x15	; 21
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	85 bb       	out	0x15, r24	; 21
		PORTC|=number;
 356:	85 b3       	in	r24, 0x15	; 21
 358:	68 2b       	or	r22, r24
 35a:	65 bb       	out	0x15, r22	; 21
		break;
 35c:	08 95       	ret
		case 'D':
		case 'd':
		PORTD&=0x0F;
 35e:	82 b3       	in	r24, 0x12	; 18
 360:	8f 70       	andi	r24, 0x0F	; 15
 362:	82 bb       	out	0x12, r24	; 18
		PORTD|=number;
 364:	82 b3       	in	r24, 0x12	; 18
 366:	68 2b       	or	r22, r24
 368:	62 bb       	out	0x12, r22	; 18
 36a:	08 95       	ret

0000036c <enable>:
	#endif
}

static void enable(void)
{
	DIO_write_pin(PORT_2,EN,1);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	82 e4       	ldi	r24, 0x42	; 66
 372:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	8f e9       	ldi	r24, 0x9F	; 159
 378:	9f e0       	ldi	r25, 0x0F	; 15
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <enable+0xe>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <enable+0x14>
 380:	00 00       	nop
	_delay_ms(2);
	DIO_write_pin(PORT_2,EN,0);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	82 e4       	ldi	r24, 0x42	; 66
 388:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
 38c:	8f e9       	ldi	r24, 0x9F	; 159
 38e:	9f e0       	ldi	r25, 0x0F	; 15
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <enable+0x24>
 394:	00 c0       	rjmp	.+0      	; 0x396 <enable+0x2a>
 396:	00 00       	nop
 398:	08 95       	ret

0000039a <LCD_send_cmd>:
	_delay_ms(2);
}

void LCD_send_cmd(char cmd)
{
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	82 e4       	ldi	r24, 0x42	; 66
 3a4:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,cmd);
	enable();
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,cmd>>4);
 3a8:	6c 2f       	mov	r22, r28
 3aa:	62 95       	swap	r22
 3ac:	6f 70       	andi	r22, 0x0F	; 15
 3ae:	81 e4       	ldi	r24, 0x41	; 65
 3b0:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 3b4:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
	DIO_write_high_nibble(PORT_1,cmd);
 3b8:	6c 2f       	mov	r22, r28
 3ba:	81 e4       	ldi	r24, 0x41	; 65
 3bc:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 3c0:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
 3c4:	8f ec       	ldi	r24, 0xCF	; 207
 3c6:	97 e0       	ldi	r25, 0x07	; 7
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <LCD_send_cmd+0x2e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_send_cmd+0x34>
 3ce:	00 00       	nop
	#endif
	_delay_ms(1);
}
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <LCD_init>:
 3d4:	2f ef       	ldi	r18, 0xFF	; 255
 3d6:	81 ee       	ldi	r24, 0xE1	; 225
 3d8:	94 e0       	ldi	r25, 0x04	; 4
 3da:	21 50       	subi	r18, 0x01	; 1
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <LCD_init+0x6>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_init+0x10>
 3e4:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_set_pin_dir(PORT_1,4,1);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	81 e4       	ldi	r24, 0x41	; 65
 3ec:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,5,1);
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	65 e0       	ldi	r22, 0x05	; 5
 3f4:	81 e4       	ldi	r24, 0x41	; 65
 3f6:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,6,1);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	66 e0       	ldi	r22, 0x06	; 6
 3fe:	81 e4       	ldi	r24, 0x41	; 65
 400:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_1,7,1);
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	67 e0       	ldi	r22, 0x07	; 7
 408:	81 e4       	ldi	r24, 0x41	; 65
 40a:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,EN,1);
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	82 e4       	ldi	r24, 0x42	; 66
 414:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RW,1);
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	82 e4       	ldi	r24, 0x42	; 66
 41e:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_set_pin_dir(PORT_2,RS,1);
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_set_pin_dir>
	DIO_write_pin(PORT_2,RW,0);	
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	82 e4       	ldi	r24, 0x42	; 66
 432:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	
	LCD_send_cmd(RETURN_HOME); //4_bits_mode //return home
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 43c:	8f e1       	ldi	r24, 0x1F	; 31
 43e:	9e e4       	ldi	r25, 0x4E	; 78
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BITS);  //4_bits_mode
 448:	88 e2       	ldi	r24, 0x28	; 40
 44a:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 44e:	8f ec       	ldi	r24, 0xCF	; 207
 450:	97 e0       	ldi	r25, 0x07	; 7
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);  //clear screen
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 460:	8f e1       	ldi	r24, 0x1F	; 31
 462:	9e e4       	ldi	r25, 0x4E	; 78
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(CURSOR_Off_DISPLAY_ON); //curson on, display on
 46c:	8c e0       	ldi	r24, 0x0C	; 12
 46e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 472:	8f ec       	ldi	r24, 0xCF	; 207
 474:	97 e0       	ldi	r25, 0x07	; 7
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(ENTRY_MODE);  //sift curson to right
 47e:	86 e0       	ldi	r24, 0x06	; 6
 480:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 484:	8f ec       	ldi	r24, 0xCF	; 207
 486:	97 e0       	ldi	r25, 0x07	; 7
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
 490:	08 95       	ret

00000492 <LCD_send_data>:
	#endif
	_delay_ms(1);
}

void LCD_send_data(char data)
{
 492:	cf 93       	push	r28
 494:	c8 2f       	mov	r28, r24
	DIO_write_pin(PORT_2,RS,1);
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	82 e4       	ldi	r24, 0x42	; 66
 49c:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_write_pin>
	#if defined eight_bits_mode
	DIO_write_port(PORT_1,data);
	enable();
	
	#elif defined four_bits_mode
	DIO_write_high_nibble(PORT_1,data>>4);
 4a0:	6c 2f       	mov	r22, r28
 4a2:	62 95       	swap	r22
 4a4:	6f 70       	andi	r22, 0x0F	; 15
 4a6:	81 e4       	ldi	r24, 0x41	; 65
 4a8:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 4ac:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
	DIO_write_high_nibble(PORT_1,data);
 4b0:	6c 2f       	mov	r22, r28
 4b2:	81 e4       	ldi	r24, 0x41	; 65
 4b4:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_write_high_nibble>
	enable();
 4b8:	0e 94 b6 01 	call	0x36c	; 0x36c <enable>
	#endif
	
}
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <LCD_send_string>:

void LCD_send_string(char* string)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	ec 01       	movw	r28, r24
	while((*string!='\0'))
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <LCD_send_string+0xe>
	{
		LCD_send_data(*string);
 4c8:	0e 94 49 02 	call	0x492	; 0x492 <LCD_send_data>
		string++;
 4cc:	21 96       	adiw	r28, 0x01	; 1
	
}

void LCD_send_string(char* string)
{
	while((*string!='\0'))
 4ce:	88 81       	ld	r24, Y
 4d0:	81 11       	cpse	r24, r1
 4d2:	fa cf       	rjmp	.-12     	; 0x4c8 <LCD_send_string+0x8>
	{
		LCD_send_data(*string);
		string++;
	}
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <LCD_clr_screen>:

void LCD_clr_screen(void)
{
	LCD_send_cmd(CLR_SCREEN);
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 4e0:	8f e1       	ldi	r24, 0x1F	; 31
 4e2:	9e e4       	ldi	r25, 0x4E	; 78
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <LCD_clr_screen+0xa>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <LCD_clr_screen+0x10>
 4ea:	00 00       	nop
 4ec:	08 95       	ret

000004ee <LCD_move_cursor>:
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
 4ee:	9f ef       	ldi	r25, 0xFF	; 255
 4f0:	98 0f       	add	r25, r24
 4f2:	92 30       	cpi	r25, 0x02	; 2
 4f4:	70 f4       	brcc	.+28     	; 0x512 <LCD_move_cursor+0x24>
 4f6:	61 31       	cpi	r22, 0x11	; 17
 4f8:	70 f4       	brcc	.+28     	; 0x516 <LCD_move_cursor+0x28>
 4fa:	66 23       	and	r22, r22
 4fc:	71 f0       	breq	.+28     	; 0x51a <LCD_move_cursor+0x2c>
	{
		data=0x80;
	}
	else if (row==1)
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	19 f4       	brne	.+6      	; 0x508 <LCD_move_cursor+0x1a>
	{
		data=(0x80+coloum-1);
 502:	8f e7       	ldi	r24, 0x7F	; 127
 504:	86 0f       	add	r24, r22
 506:	0c c0       	rjmp	.+24     	; 0x520 <LCD_move_cursor+0x32>
	}
	else if (row==2)
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	49 f4       	brne	.+18     	; 0x51e <LCD_move_cursor+0x30>
	{
		data=(0xC0+coloum-1);
 50c:	8f eb       	ldi	r24, 0xBF	; 191
 50e:	86 0f       	add	r24, r22
 510:	07 c0       	rjmp	.+14     	; 0x520 <LCD_move_cursor+0x32>
void LCD_move_cursor(char row,char coloum)
{
	char data=0;
	if (row>2 || row<1 || coloum>16 || coloum<1)
	{
		data=0x80;
 512:	80 e8       	ldi	r24, 0x80	; 128
 514:	05 c0       	rjmp	.+10     	; 0x520 <LCD_move_cursor+0x32>
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	03 c0       	rjmp	.+6      	; 0x520 <LCD_move_cursor+0x32>
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	01 c0       	rjmp	.+2      	; 0x520 <LCD_move_cursor+0x32>
	_delay_ms(10);
}

void LCD_move_cursor(char row,char coloum)
{
	char data=0;
 51e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=(0xC0+coloum-1);
	}
	LCD_send_cmd(data);
 520:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_send_cmd>
 524:	8f ec       	ldi	r24, 0xCF	; 207
 526:	97 e0       	ldi	r25, 0x07	; 7
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_move_cursor+0x3a>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_move_cursor+0x40>
 52e:	00 00       	nop
 530:	08 95       	ret

00000532 <main>:
#include "MOTOR.h"
#include "macro_function.h"

int main(void)
{
  LCD_init();
 532:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <LCD_init>
  unsigned char IR_1=0,IR_2=0;
  unsigned char flag_1=0,flag_2=0;
  unsigned char count=0;
  LCD_send_string("there are 0 cars");
 536:	80 e6       	ldi	r24, 0x60	; 96
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
  LCD_move_cursor(2,1);
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_move_cursor>
  LCD_send_string("garage has space");
 546:	81 e7       	ldi	r24, 0x71	; 113
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
int main(void)
{
  LCD_init();
  unsigned char IR_1=0,IR_2=0;
  unsigned char flag_1=0,flag_2=0;
  unsigned char count=0;
 54e:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
  LCD_init();
  unsigned char IR_1=0,IR_2=0;
  unsigned char flag_1=0,flag_2=0;
 550:	d0 e0       	ldi	r29, 0x00	; 0
 552:	c0 e0       	ldi	r28, 0x00	; 0
 554:	01 c0       	rjmp	.+2      	; 0x558 <main+0x26>
			LCD_move_cursor(2,1);
			LCD_send_string("garage has space");
			flag_2=1;
		}else if (0==IR_2)
		{
			flag_2=0;
 556:	d0 e0       	ldi	r29, 0x00	; 0
  LCD_send_string("there are 0 cars");
  LCD_move_cursor(2,1);
  LCD_send_string("garage has space");
    while (1) 
    {
		IR_1=READ_BIT(PIND,PD0);
 558:	80 b3       	in	r24, 0x10	; 16
		if (1==IR_1 && 0==flag_1 && count<3)
 55a:	98 2f       	mov	r25, r24
 55c:	91 70       	andi	r25, 0x01	; 1
 55e:	80 ff       	sbrs	r24, 0
 560:	35 c0       	rjmp	.+106    	; 0x5cc <main+0x9a>
 562:	c1 11       	cpse	r28, r1
 564:	33 c0       	rjmp	.+102    	; 0x5cc <main+0x9a>
 566:	13 30       	cpi	r17, 0x03	; 3
 568:	88 f5       	brcc	.+98     	; 0x5cc <main+0x9a>
		{
			count++;
 56a:	c1 e0       	ldi	r28, 0x01	; 1
 56c:	c1 0f       	add	r28, r17
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(90);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	84 eb       	ldi	r24, 0xB4	; 180
 574:	92 e4       	ldi	r25, 0x42	; 66
 576:	0e 94 2b 03 	call	0x656	; 0x656 <Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A>
 57a:	2f e3       	ldi	r18, 0x3F	; 63
 57c:	8d e0       	ldi	r24, 0x0D	; 13
 57e:	93 e0       	ldi	r25, 0x03	; 3
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <main+0x4e>
 588:	00 c0       	rjmp	.+0      	; 0x58a <main+0x58>
 58a:	00 00       	nop
			_delay_ms(1000);
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(0);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	cb 01       	movw	r24, r22
 592:	0e 94 2b 03 	call	0x656	; 0x656 <Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A>
			LCD_move_cursor(1,11);
 596:	6b e0       	ldi	r22, 0x0B	; 11
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_move_cursor>
			LCD_send_data(count+48);
 59e:	81 e3       	ldi	r24, 0x31	; 49
 5a0:	81 0f       	add	r24, r17
 5a2:	0e 94 49 02 	call	0x492	; 0x492 <LCD_send_data>
			flag_1=1;
			if (3==count)
 5a6:	c3 30       	cpi	r28, 0x03	; 3
 5a8:	a1 f4       	brne	.+40     	; 0x5d2 <main+0xa0>
			{
				LCD_clr_screen();
 5aa:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_clr_screen>
				LCD_send_string("there are 3 cars");
 5ae:	82 e8       	ldi	r24, 0x82	; 130
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
				LCD_move_cursor(2,1);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	82 e0       	ldi	r24, 0x02	; 2
 5ba:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_move_cursor>
				LCD_send_string("garage is full");
 5be:	83 e9       	ldi	r24, 0x93	; 147
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
    while (1) 
    {
		IR_1=READ_BIT(PIND,PD0);
		if (1==IR_1 && 0==flag_1 && count<3)
		{
			count++;
 5c6:	1c 2f       	mov	r17, r28
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(90);
			_delay_ms(1000);
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(0);
			LCD_move_cursor(1,11);
			LCD_send_data(count+48);
			flag_1=1;
 5c8:	c1 e0       	ldi	r28, 0x01	; 1
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <main+0xa8>
				LCD_clr_screen();
				LCD_send_string("there are 3 cars");
				LCD_move_cursor(2,1);
				LCD_send_string("garage is full");
			}
		}else if (0==IR_1)
 5cc:	99 23       	and	r25, r25
 5ce:	21 f0       	breq	.+8      	; 0x5d8 <main+0xa6>
 5d0:	04 c0       	rjmp	.+8      	; 0x5da <main+0xa8>
    while (1) 
    {
		IR_1=READ_BIT(PIND,PD0);
		if (1==IR_1 && 0==flag_1 && count<3)
		{
			count++;
 5d2:	1c 2f       	mov	r17, r28
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(90);
			_delay_ms(1000);
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(0);
			LCD_move_cursor(1,11);
			LCD_send_data(count+48);
			flag_1=1;
 5d4:	c1 e0       	ldi	r28, 0x01	; 1
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <main+0xa8>
				LCD_move_cursor(2,1);
				LCD_send_string("garage is full");
			}
		}else if (0==IR_1)
		{
			flag_1=0;
 5d8:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		IR_2=READ_BIT(PIND,PD1);
 5da:	80 b3       	in	r24, 0x10	; 16
 5dc:	82 70       	andi	r24, 0x02	; 2
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	95 95       	asr	r25
 5e2:	87 95       	ror	r24
		if (1==IR_2 && 0==flag_2 && count>0)
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	99 f5       	brne	.+102    	; 0x64e <main+0x11c>
 5e8:	d1 11       	cpse	r29, r1
 5ea:	31 c0       	rjmp	.+98     	; 0x64e <main+0x11c>
 5ec:	11 23       	and	r17, r17
 5ee:	79 f1       	breq	.+94     	; 0x64e <main+0x11c>
		{
			count--;
 5f0:	df ef       	ldi	r29, 0xFF	; 255
 5f2:	d1 0f       	add	r29, r17
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_B(90);
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	84 eb       	ldi	r24, 0xB4	; 180
 5fa:	92 e4       	ldi	r25, 0x42	; 66
 5fc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_B>
 600:	2f e3       	ldi	r18, 0x3F	; 63
 602:	8d e0       	ldi	r24, 0x0D	; 13
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	21 50       	subi	r18, 0x01	; 1
 608:	80 40       	sbci	r24, 0x00	; 0
 60a:	90 40       	sbci	r25, 0x00	; 0
 60c:	e1 f7       	brne	.-8      	; 0x606 <main+0xd4>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <main+0xde>
 610:	00 00       	nop
			_delay_ms(1000);
			Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_B(0);
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	cb 01       	movw	r24, r22
 618:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_B>
			LCD_clr_screen();
 61c:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_clr_screen>
			LCD_send_string("there are ");
 620:	82 ea       	ldi	r24, 0xA2	; 162
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
			LCD_send_data(count+48);
 628:	8f e2       	ldi	r24, 0x2F	; 47
 62a:	81 0f       	add	r24, r17
 62c:	0e 94 49 02 	call	0x492	; 0x492 <LCD_send_data>
			LCD_send_string(" cars");
 630:	8b e6       	ldi	r24, 0x6B	; 107
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
			LCD_move_cursor(2,1);
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	82 e0       	ldi	r24, 0x02	; 2
 63c:	0e 94 77 02 	call	0x4ee	; 0x4ee <LCD_move_cursor>
			LCD_send_string("garage has space");
 640:	81 e7       	ldi	r24, 0x71	; 113
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_send_string>
		}
		
		IR_2=READ_BIT(PIND,PD1);
		if (1==IR_2 && 0==flag_2 && count>0)
		{
			count--;
 648:	1d 2f       	mov	r17, r29
			LCD_send_string("there are ");
			LCD_send_data(count+48);
			LCD_send_string(" cars");
			LCD_move_cursor(2,1);
			LCD_send_string("garage has space");
			flag_2=1;
 64a:	d1 e0       	ldi	r29, 0x01	; 1
 64c:	85 cf       	rjmp	.-246    	; 0x558 <main+0x26>
		}else if (0==IR_2)
 64e:	88 23       	and	r24, r24
 650:	09 f4       	brne	.+2      	; 0x654 <main+0x122>
 652:	81 cf       	rjmp	.-254    	; 0x556 <main+0x24>
 654:	81 cf       	rjmp	.-254    	; 0x558 <main+0x26>

00000656 <Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A>:


void Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_A(double angle)
{
	//determine Fast PWM mode with ICR1 as TOP (WGM13:0 = 14)
	CLR_BIT(TCCR1A,WGM10);
 656:	2f b5       	in	r18, 0x2f	; 47
 658:	2e 7f       	andi	r18, 0xFE	; 254
 65a:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
 65c:	2f b5       	in	r18, 0x2f	; 47
 65e:	22 60       	ori	r18, 0x02	; 2
 660:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 662:	2e b5       	in	r18, 0x2e	; 46
 664:	28 60       	ori	r18, 0x08	; 8
 666:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 668:	2e b5       	in	r18, 0x2e	; 46
 66a:	20 61       	ori	r18, 0x10	; 16
 66c:	2e bd       	out	0x2e, r18	; 46
	//determine prescaler=1, timer1_clock=(cpu_clock/prescaler)  cpu_clock=1MHZ
	SET_BIT(TCCR1B,CS10);
 66e:	2e b5       	in	r18, 0x2e	; 46
 670:	21 60       	ori	r18, 0x01	; 1
 672:	2e bd       	out	0x2e, r18	; 46
	CLR_BIT(TCCR1B,CS11);
 674:	2e b5       	in	r18, 0x2e	; 46
 676:	2d 7f       	andi	r18, 0xFD	; 253
 678:	2e bd       	out	0x2e, r18	; 46
	CLR_BIT(TCCR1B,CS12);
 67a:	2e b5       	in	r18, 0x2e	; 46
 67c:	2b 7f       	andi	r18, 0xFB	; 251
 67e:	2e bd       	out	0x2e, r18	; 46
	//set OC1A as output pin to generetion wave
	SET_BIT(DDRD,PD5);
 680:	21 b3       	in	r18, 0x11	; 17
 682:	20 62       	ori	r18, 0x20	; 32
 684:	21 bb       	out	0x11, r18	; 17
	//clear OC1A on compare match and set OC1A at bottom=0 (non-inverting mode)
	CLR_BIT(TCCR1A,COM1A0);
 686:	2f b5       	in	r18, 0x2f	; 47
 688:	2f 7b       	andi	r18, 0xBF	; 191
 68a:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,COM1A1);
 68c:	2f b5       	in	r18, 0x2f	; 47
 68e:	20 68       	ori	r18, 0x80	; 128
 690:	2f bd       	out	0x2f, r18	; 47
	//load value in OCR1A to compare match
	OCR1A=(1.5+(0.5/90.0)*angle)*1000;
 692:	21 e6       	ldi	r18, 0x61	; 97
 694:	3b e0       	ldi	r19, 0x0B	; 11
 696:	46 eb       	ldi	r20, 0xB6	; 182
 698:	5b e3       	ldi	r21, 0x3B	; 59
 69a:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3>
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 ec       	ldi	r20, 0xC0	; 192
 6a4:	5f e3       	ldi	r21, 0x3F	; 63
 6a6:	0e 94 9e 03 	call	0x73c	; 0x73c <__addsf3>
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	4a e7       	ldi	r20, 0x7A	; 122
 6b0:	54 e4       	ldi	r21, 0x44	; 68
 6b2:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3>
 6b6:	0e 94 0a 04 	call	0x814	; 0x814 <__fixunssfsi>
 6ba:	7b bd       	out	0x2b, r23	; 43
 6bc:	6a bd       	out	0x2a, r22	; 42
	//load value in ICR1=top define the TOP value for the PWM period (20ms) ,update at bottom
	ICR1=19999; 
 6be:	8f e1       	ldi	r24, 0x1F	; 31
 6c0:	9e e4       	ldi	r25, 0x4E	; 78
 6c2:	97 bd       	out	0x27, r25	; 39
 6c4:	86 bd       	out	0x26, r24	; 38
 6c6:	08 95       	ret

000006c8 <Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_B>:
}
 
void Servo_motor_with_TIMER1_fast_pwm_ICRA_wave_B(double angle)
{
	//determine Fast PWM mode with ICR1 as TOP (WGM13:0 = 14)
	CLR_BIT(TCCR1A,WGM10);
 6c8:	2f b5       	in	r18, 0x2f	; 47
 6ca:	2e 7f       	andi	r18, 0xFE	; 254
 6cc:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
 6ce:	2f b5       	in	r18, 0x2f	; 47
 6d0:	22 60       	ori	r18, 0x02	; 2
 6d2:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 6d4:	2e b5       	in	r18, 0x2e	; 46
 6d6:	28 60       	ori	r18, 0x08	; 8
 6d8:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 6da:	2e b5       	in	r18, 0x2e	; 46
 6dc:	20 61       	ori	r18, 0x10	; 16
 6de:	2e bd       	out	0x2e, r18	; 46
	//determine prescaler=1, timer1_clock=(cpu_clock/prescaler)  cpu_clock=1MHZ
	SET_BIT(TCCR1B,CS10);
 6e0:	2e b5       	in	r18, 0x2e	; 46
 6e2:	21 60       	ori	r18, 0x01	; 1
 6e4:	2e bd       	out	0x2e, r18	; 46
	CLR_BIT(TCCR1B,CS11);
 6e6:	2e b5       	in	r18, 0x2e	; 46
 6e8:	2d 7f       	andi	r18, 0xFD	; 253
 6ea:	2e bd       	out	0x2e, r18	; 46
	CLR_BIT(TCCR1B,CS12);
 6ec:	2e b5       	in	r18, 0x2e	; 46
 6ee:	2b 7f       	andi	r18, 0xFB	; 251
 6f0:	2e bd       	out	0x2e, r18	; 46
	//set OC1B as output pin to generetion wave
	SET_BIT(DDRD,PD4);
 6f2:	21 b3       	in	r18, 0x11	; 17
 6f4:	20 61       	ori	r18, 0x10	; 16
 6f6:	21 bb       	out	0x11, r18	; 17
	//clear OC1A on compare match and set OC1A at bottom=0 (non-inverting mode)
	CLR_BIT(TCCR1A,COM1B0);
 6f8:	2f b5       	in	r18, 0x2f	; 47
 6fa:	2f 7e       	andi	r18, 0xEF	; 239
 6fc:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,COM1B1);
 6fe:	2f b5       	in	r18, 0x2f	; 47
 700:	20 62       	ori	r18, 0x20	; 32
 702:	2f bd       	out	0x2f, r18	; 47
	//load value in OCR1B to compare match
	OCR1B=(1.5+(0.5/90.0)*angle)*1000;
 704:	21 e6       	ldi	r18, 0x61	; 97
 706:	3b e0       	ldi	r19, 0x0B	; 11
 708:	46 eb       	ldi	r20, 0xB6	; 182
 70a:	5b e3       	ldi	r21, 0x3B	; 59
 70c:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3>
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	40 ec       	ldi	r20, 0xC0	; 192
 716:	5f e3       	ldi	r21, 0x3F	; 63
 718:	0e 94 9e 03 	call	0x73c	; 0x73c <__addsf3>
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	4a e7       	ldi	r20, 0x7A	; 122
 722:	54 e4       	ldi	r21, 0x44	; 68
 724:	0e 94 8a 04 	call	0x914	; 0x914 <__mulsf3>
 728:	0e 94 0a 04 	call	0x814	; 0x814 <__fixunssfsi>
 72c:	79 bd       	out	0x29, r23	; 41
 72e:	68 bd       	out	0x28, r22	; 40
	//load value in ICR1=top define the TOP value for the PWM period (20ms) ,update at bottom
	ICR1=19999; 
 730:	8f e1       	ldi	r24, 0x1F	; 31
 732:	9e e4       	ldi	r25, 0x4E	; 78
 734:	97 bd       	out	0x27, r25	; 39
 736:	86 bd       	out	0x26, r24	; 38
 738:	08 95       	ret

0000073a <__subsf3>:
 73a:	50 58       	subi	r21, 0x80	; 128

0000073c <__addsf3>:
 73c:	bb 27       	eor	r27, r27
 73e:	aa 27       	eor	r26, r26
 740:	0e 94 b5 03 	call	0x76a	; 0x76a <__addsf3x>
 744:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_round>
 748:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscA>
 74c:	38 f0       	brcs	.+14     	; 0x75c <__addsf3+0x20>
 74e:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscB>
 752:	20 f0       	brcs	.+8      	; 0x75c <__addsf3+0x20>
 754:	39 f4       	brne	.+14     	; 0x764 <__addsf3+0x28>
 756:	9f 3f       	cpi	r25, 0xFF	; 255
 758:	19 f4       	brne	.+6      	; 0x760 <__addsf3+0x24>
 75a:	26 f4       	brtc	.+8      	; 0x764 <__addsf3+0x28>
 75c:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_nan>
 760:	0e f4       	brtc	.+2      	; 0x764 <__addsf3+0x28>
 762:	e0 95       	com	r30
 764:	e7 fb       	bst	r30, 7
 766:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_inf>

0000076a <__addsf3x>:
 76a:	e9 2f       	mov	r30, r25
 76c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_split3>
 770:	58 f3       	brcs	.-42     	; 0x748 <__addsf3+0xc>
 772:	ba 17       	cp	r27, r26
 774:	62 07       	cpc	r22, r18
 776:	73 07       	cpc	r23, r19
 778:	84 07       	cpc	r24, r20
 77a:	95 07       	cpc	r25, r21
 77c:	20 f0       	brcs	.+8      	; 0x786 <__addsf3x+0x1c>
 77e:	79 f4       	brne	.+30     	; 0x79e <__addsf3x+0x34>
 780:	a6 f5       	brtc	.+104    	; 0x7ea <__addsf3x+0x80>
 782:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_zero>
 786:	0e f4       	brtc	.+2      	; 0x78a <__addsf3x+0x20>
 788:	e0 95       	com	r30
 78a:	0b 2e       	mov	r0, r27
 78c:	ba 2f       	mov	r27, r26
 78e:	a0 2d       	mov	r26, r0
 790:	0b 01       	movw	r0, r22
 792:	b9 01       	movw	r22, r18
 794:	90 01       	movw	r18, r0
 796:	0c 01       	movw	r0, r24
 798:	ca 01       	movw	r24, r20
 79a:	a0 01       	movw	r20, r0
 79c:	11 24       	eor	r1, r1
 79e:	ff 27       	eor	r31, r31
 7a0:	59 1b       	sub	r21, r25
 7a2:	99 f0       	breq	.+38     	; 0x7ca <__addsf3x+0x60>
 7a4:	59 3f       	cpi	r21, 0xF9	; 249
 7a6:	50 f4       	brcc	.+20     	; 0x7bc <__addsf3x+0x52>
 7a8:	50 3e       	cpi	r21, 0xE0	; 224
 7aa:	68 f1       	brcs	.+90     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ac:	1a 16       	cp	r1, r26
 7ae:	f0 40       	sbci	r31, 0x00	; 0
 7b0:	a2 2f       	mov	r26, r18
 7b2:	23 2f       	mov	r18, r19
 7b4:	34 2f       	mov	r19, r20
 7b6:	44 27       	eor	r20, r20
 7b8:	58 5f       	subi	r21, 0xF8	; 248
 7ba:	f3 cf       	rjmp	.-26     	; 0x7a2 <__addsf3x+0x38>
 7bc:	46 95       	lsr	r20
 7be:	37 95       	ror	r19
 7c0:	27 95       	ror	r18
 7c2:	a7 95       	ror	r26
 7c4:	f0 40       	sbci	r31, 0x00	; 0
 7c6:	53 95       	inc	r21
 7c8:	c9 f7       	brne	.-14     	; 0x7bc <__addsf3x+0x52>
 7ca:	7e f4       	brtc	.+30     	; 0x7ea <__addsf3x+0x80>
 7cc:	1f 16       	cp	r1, r31
 7ce:	ba 0b       	sbc	r27, r26
 7d0:	62 0b       	sbc	r22, r18
 7d2:	73 0b       	sbc	r23, r19
 7d4:	84 0b       	sbc	r24, r20
 7d6:	ba f0       	brmi	.+46     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	a1 f0       	breq	.+40     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7dc:	ff 0f       	add	r31, r31
 7de:	bb 1f       	adc	r27, r27
 7e0:	66 1f       	adc	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	c2 f7       	brpl	.-16     	; 0x7d8 <__addsf3x+0x6e>
 7e8:	0e c0       	rjmp	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7ea:	ba 0f       	add	r27, r26
 7ec:	62 1f       	adc	r22, r18
 7ee:	73 1f       	adc	r23, r19
 7f0:	84 1f       	adc	r24, r20
 7f2:	48 f4       	brcc	.+18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f4:	87 95       	ror	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b7 95       	ror	r27
 7fc:	f7 95       	ror	r31
 7fe:	9e 3f       	cpi	r25, 0xFE	; 254
 800:	08 f0       	brcs	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	b0 cf       	rjmp	.-160    	; 0x764 <__addsf3+0x28>
 804:	93 95       	inc	r25
 806:	88 0f       	add	r24, r24
 808:	08 f0       	brcs	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 80a:	99 27       	eor	r25, r25
 80c:	ee 0f       	add	r30, r30
 80e:	97 95       	ror	r25
 810:	87 95       	ror	r24
 812:	08 95       	ret

00000814 <__fixunssfsi>:
 814:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_splitA>
 818:	88 f0       	brcs	.+34     	; 0x83c <__fixunssfsi+0x28>
 81a:	9f 57       	subi	r25, 0x7F	; 127
 81c:	98 f0       	brcs	.+38     	; 0x844 <__fixunssfsi+0x30>
 81e:	b9 2f       	mov	r27, r25
 820:	99 27       	eor	r25, r25
 822:	b7 51       	subi	r27, 0x17	; 23
 824:	b0 f0       	brcs	.+44     	; 0x852 <__fixunssfsi+0x3e>
 826:	e1 f0       	breq	.+56     	; 0x860 <__stack+0x1>
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	1a f0       	brmi	.+6      	; 0x838 <__fixunssfsi+0x24>
 832:	ba 95       	dec	r27
 834:	c9 f7       	brne	.-14     	; 0x828 <__fixunssfsi+0x14>
 836:	14 c0       	rjmp	.+40     	; 0x860 <__stack+0x1>
 838:	b1 30       	cpi	r27, 0x01	; 1
 83a:	91 f0       	breq	.+36     	; 0x860 <__stack+0x1>
 83c:	0e 94 83 04 	call	0x906	; 0x906 <__fp_zero>
 840:	b1 e0       	ldi	r27, 0x01	; 1
 842:	08 95       	ret
 844:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_zero>
 848:	67 2f       	mov	r22, r23
 84a:	78 2f       	mov	r23, r24
 84c:	88 27       	eor	r24, r24
 84e:	b8 5f       	subi	r27, 0xF8	; 248
 850:	39 f0       	breq	.+14     	; 0x860 <__stack+0x1>
 852:	b9 3f       	cpi	r27, 0xF9	; 249
 854:	cc f3       	brlt	.-14     	; 0x848 <__fixunssfsi+0x34>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b3 95       	inc	r27
 85e:	d9 f7       	brne	.-10     	; 0x856 <__fixunssfsi+0x42>
 860:	3e f4       	brtc	.+14     	; 0x870 <__stack+0x11>
 862:	90 95       	com	r25
 864:	80 95       	com	r24
 866:	70 95       	com	r23
 868:	61 95       	neg	r22
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	08 95       	ret

00000872 <__fp_inf>:
 872:	97 f9       	bld	r25, 7
 874:	9f 67       	ori	r25, 0x7F	; 127
 876:	80 e8       	ldi	r24, 0x80	; 128
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	08 95       	ret

0000087e <__fp_nan>:
 87e:	9f ef       	ldi	r25, 0xFF	; 255
 880:	80 ec       	ldi	r24, 0xC0	; 192
 882:	08 95       	ret

00000884 <__fp_pscA>:
 884:	00 24       	eor	r0, r0
 886:	0a 94       	dec	r0
 888:	16 16       	cp	r1, r22
 88a:	17 06       	cpc	r1, r23
 88c:	18 06       	cpc	r1, r24
 88e:	09 06       	cpc	r0, r25
 890:	08 95       	ret

00000892 <__fp_pscB>:
 892:	00 24       	eor	r0, r0
 894:	0a 94       	dec	r0
 896:	12 16       	cp	r1, r18
 898:	13 06       	cpc	r1, r19
 89a:	14 06       	cpc	r1, r20
 89c:	05 06       	cpc	r0, r21
 89e:	08 95       	ret

000008a0 <__fp_round>:
 8a0:	09 2e       	mov	r0, r25
 8a2:	03 94       	inc	r0
 8a4:	00 0c       	add	r0, r0
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__fp_round+0xc>
 8a8:	88 23       	and	r24, r24
 8aa:	52 f0       	brmi	.+20     	; 0x8c0 <__fp_round+0x20>
 8ac:	bb 0f       	add	r27, r27
 8ae:	40 f4       	brcc	.+16     	; 0x8c0 <__fp_round+0x20>
 8b0:	bf 2b       	or	r27, r31
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_round+0x18>
 8b4:	60 ff       	sbrs	r22, 0
 8b6:	04 c0       	rjmp	.+8      	; 0x8c0 <__fp_round+0x20>
 8b8:	6f 5f       	subi	r22, 0xFF	; 255
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	08 95       	ret

000008c2 <__fp_split3>:
 8c2:	57 fd       	sbrc	r21, 7
 8c4:	90 58       	subi	r25, 0x80	; 128
 8c6:	44 0f       	add	r20, r20
 8c8:	55 1f       	adc	r21, r21
 8ca:	59 f0       	breq	.+22     	; 0x8e2 <__fp_splitA+0x10>
 8cc:	5f 3f       	cpi	r21, 0xFF	; 255
 8ce:	71 f0       	breq	.+28     	; 0x8ec <__fp_splitA+0x1a>
 8d0:	47 95       	ror	r20

000008d2 <__fp_splitA>:
 8d2:	88 0f       	add	r24, r24
 8d4:	97 fb       	bst	r25, 7
 8d6:	99 1f       	adc	r25, r25
 8d8:	61 f0       	breq	.+24     	; 0x8f2 <__fp_splitA+0x20>
 8da:	9f 3f       	cpi	r25, 0xFF	; 255
 8dc:	79 f0       	breq	.+30     	; 0x8fc <__fp_splitA+0x2a>
 8de:	87 95       	ror	r24
 8e0:	08 95       	ret
 8e2:	12 16       	cp	r1, r18
 8e4:	13 06       	cpc	r1, r19
 8e6:	14 06       	cpc	r1, r20
 8e8:	55 1f       	adc	r21, r21
 8ea:	f2 cf       	rjmp	.-28     	; 0x8d0 <__fp_split3+0xe>
 8ec:	46 95       	lsr	r20
 8ee:	f1 df       	rcall	.-30     	; 0x8d2 <__fp_splitA>
 8f0:	08 c0       	rjmp	.+16     	; 0x902 <__fp_splitA+0x30>
 8f2:	16 16       	cp	r1, r22
 8f4:	17 06       	cpc	r1, r23
 8f6:	18 06       	cpc	r1, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	f1 cf       	rjmp	.-30     	; 0x8de <__fp_splitA+0xc>
 8fc:	86 95       	lsr	r24
 8fe:	71 05       	cpc	r23, r1
 900:	61 05       	cpc	r22, r1
 902:	08 94       	sec
 904:	08 95       	ret

00000906 <__fp_zero>:
 906:	e8 94       	clt

00000908 <__fp_szero>:
 908:	bb 27       	eor	r27, r27
 90a:	66 27       	eor	r22, r22
 90c:	77 27       	eor	r23, r23
 90e:	cb 01       	movw	r24, r22
 910:	97 f9       	bld	r25, 7
 912:	08 95       	ret

00000914 <__mulsf3>:
 914:	0e 94 9d 04 	call	0x93a	; 0x93a <__mulsf3x>
 918:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_round>
 91c:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscA>
 920:	38 f0       	brcs	.+14     	; 0x930 <__mulsf3+0x1c>
 922:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscB>
 926:	20 f0       	brcs	.+8      	; 0x930 <__mulsf3+0x1c>
 928:	95 23       	and	r25, r21
 92a:	11 f0       	breq	.+4      	; 0x930 <__mulsf3+0x1c>
 92c:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_inf>
 930:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_nan>
 934:	11 24       	eor	r1, r1
 936:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_szero>

0000093a <__mulsf3x>:
 93a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_split3>
 93e:	70 f3       	brcs	.-36     	; 0x91c <__mulsf3+0x8>

00000940 <__mulsf3_pse>:
 940:	95 9f       	mul	r25, r21
 942:	c1 f3       	breq	.-16     	; 0x934 <__mulsf3+0x20>
 944:	95 0f       	add	r25, r21
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	55 1f       	adc	r21, r21
 94a:	62 9f       	mul	r22, r18
 94c:	f0 01       	movw	r30, r0
 94e:	72 9f       	mul	r23, r18
 950:	bb 27       	eor	r27, r27
 952:	f0 0d       	add	r31, r0
 954:	b1 1d       	adc	r27, r1
 956:	63 9f       	mul	r22, r19
 958:	aa 27       	eor	r26, r26
 95a:	f0 0d       	add	r31, r0
 95c:	b1 1d       	adc	r27, r1
 95e:	aa 1f       	adc	r26, r26
 960:	64 9f       	mul	r22, r20
 962:	66 27       	eor	r22, r22
 964:	b0 0d       	add	r27, r0
 966:	a1 1d       	adc	r26, r1
 968:	66 1f       	adc	r22, r22
 96a:	82 9f       	mul	r24, r18
 96c:	22 27       	eor	r18, r18
 96e:	b0 0d       	add	r27, r0
 970:	a1 1d       	adc	r26, r1
 972:	62 1f       	adc	r22, r18
 974:	73 9f       	mul	r23, r19
 976:	b0 0d       	add	r27, r0
 978:	a1 1d       	adc	r26, r1
 97a:	62 1f       	adc	r22, r18
 97c:	83 9f       	mul	r24, r19
 97e:	a0 0d       	add	r26, r0
 980:	61 1d       	adc	r22, r1
 982:	22 1f       	adc	r18, r18
 984:	74 9f       	mul	r23, r20
 986:	33 27       	eor	r19, r19
 988:	a0 0d       	add	r26, r0
 98a:	61 1d       	adc	r22, r1
 98c:	23 1f       	adc	r18, r19
 98e:	84 9f       	mul	r24, r20
 990:	60 0d       	add	r22, r0
 992:	21 1d       	adc	r18, r1
 994:	82 2f       	mov	r24, r18
 996:	76 2f       	mov	r23, r22
 998:	6a 2f       	mov	r22, r26
 99a:	11 24       	eor	r1, r1
 99c:	9f 57       	subi	r25, 0x7F	; 127
 99e:	50 40       	sbci	r21, 0x00	; 0
 9a0:	9a f0       	brmi	.+38     	; 0x9c8 <__mulsf3_pse+0x88>
 9a2:	f1 f0       	breq	.+60     	; 0x9e0 <__mulsf3_pse+0xa0>
 9a4:	88 23       	and	r24, r24
 9a6:	4a f0       	brmi	.+18     	; 0x9ba <__mulsf3_pse+0x7a>
 9a8:	ee 0f       	add	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	bb 1f       	adc	r27, r27
 9ae:	66 1f       	adc	r22, r22
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 1f       	adc	r24, r24
 9b4:	91 50       	subi	r25, 0x01	; 1
 9b6:	50 40       	sbci	r21, 0x00	; 0
 9b8:	a9 f7       	brne	.-22     	; 0x9a4 <__mulsf3_pse+0x64>
 9ba:	9e 3f       	cpi	r25, 0xFE	; 254
 9bc:	51 05       	cpc	r21, r1
 9be:	80 f0       	brcs	.+32     	; 0x9e0 <__mulsf3_pse+0xa0>
 9c0:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_inf>
 9c4:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_szero>
 9c8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ca:	e4 f3       	brlt	.-8      	; 0x9c4 <__mulsf3_pse+0x84>
 9cc:	98 3e       	cpi	r25, 0xE8	; 232
 9ce:	d4 f3       	brlt	.-12     	; 0x9c4 <__mulsf3_pse+0x84>
 9d0:	86 95       	lsr	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	b7 95       	ror	r27
 9d8:	f7 95       	ror	r31
 9da:	e7 95       	ror	r30
 9dc:	9f 5f       	subi	r25, 0xFF	; 255
 9de:	c1 f7       	brne	.-16     	; 0x9d0 <__mulsf3_pse+0x90>
 9e0:	fe 2b       	or	r31, r30
 9e2:	88 0f       	add	r24, r24
 9e4:	91 1d       	adc	r25, r1
 9e6:	96 95       	lsr	r25
 9e8:	87 95       	ror	r24
 9ea:	97 f9       	bld	r25, 7
 9ec:	08 95       	ret

000009ee <__tablejump2__>:
 9ee:	ee 0f       	add	r30, r30
 9f0:	ff 1f       	adc	r31, r31
 9f2:	05 90       	lpm	r0, Z+
 9f4:	f4 91       	lpm	r31, Z
 9f6:	e0 2d       	mov	r30, r0
 9f8:	09 94       	ijmp

000009fa <_exit>:
 9fa:	f8 94       	cli

000009fc <__stop_program>:
 9fc:	ff cf       	rjmp	.-2      	; 0x9fc <__stop_program>
